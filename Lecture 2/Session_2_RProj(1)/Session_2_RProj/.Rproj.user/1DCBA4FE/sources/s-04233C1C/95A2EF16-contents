#### Figure 16.1

library(forecast)
Amtrak.data <- read.csv("Amtrak data.csv")

# create time series object using ts()
# ts() takes three arguments: start, end, and freq.
# with monthly data, the frequency of periods per season is 12 (per year).
# arguments start and end are (season number, period number) pairs.
# here start is Jan 1991: start = c(1991, 1); end is Mar 2004: end = c(2004, 3).
ridership.ts <- ts(Amtrak.data$Ridership,
                   start = c(1991, 1), end = c(2004, 3), freq = 12)

# plot the series
plot(ridership.ts, xlab = "Time", ylab = "Ridership (in 000s)", ylim = c(1300, 2300))
plot(ridership.ts)
#### Figure 13.6

library(forecast)

# create short time series
# use window() to create a new, shorter time series of ridership.ts
# for the new three-year series, start time is Jan 1997 and end time is Dec 1999
ridership.ts.3yrs <- window(ridership.ts, start = c(1997, 1), end = c(1999, 12))

# fit a linear regression model to the time series
ridership.lm <- tslm(ridership.ts ~ trend + I(trend^2))

# shorter and longer time series
par(mfrow = c(2, 1))
plot(ridership.ts.3yrs, xlab = "Time", ylab = "Ridership (in 000s)",
     ylim = c(1300, 2300))
plot(ridership.ts, xlab = "Time", ylab = "Ridership (in 000s)", ylim = c(1300, 2300))

# overlay the fitted values of the linear model
lines(ridership.lm$fitted, lwd = 2)


#### Figure 16.4
par(mfrow = c(1, 1))
nValid <- 36
nTrain <- length(ridership.ts) - nValid

# partition the data
train.ts <- window(ridership.ts, start = c(1991, 1), end = c(1991, nTrain))
valid.ts <- window(ridership.ts, start = c(1991, nTrain + 1),
                   end = c(1991, nTrain + nValid))

length(ridership.ts)

#  generate the naive and seasonal naive forecasts
naive.pred <- naive(train.ts, h = nValid)
snaive.pred <- snaive(train.ts, h = nValid)

# plot forecasts and actuals in the training and validation sets
par(mfrow = c(1, 1))

plot(train.ts, ylim = c(1300, 2600),  ylab = "Ridership", xlab = "Time", bty = "l",
     xaxt = "n", xlim = c(1991,2006.25), main = "")
axis(1, at = seq(1991, 2006, 1), labels = format(seq(1991, 2006, 1)))
lines(naive.pred$mean, lwd = 2, col = "blue", lty = 1)
lines(snaive.pred$mean, lwd = 2, col = "blue", lty = 1)
lines(valid.ts, col = "grey20", lty = 3)
lines(c(2004.25 - 3, 2004.25 - 3), c(0, 3500))
lines(c(2004.25, 2004.25), c(0, 3500))
text(1996.25, 2500, "Training")
text(2002.75, 2500, "Validation")
text(2005.25, 2500, "Future")
arrows(2004 - 3, 2450, 1991.25, 2450, code = 3, length = 0.1, lwd = 1,angle = 30)
arrows(2004.5 - 3, 2450, 2004, 2450, code = 3, length = 0.1, lwd = 1,angle = 30)
arrows(2004.5, 2450, 2006, 2450, code = 3, length = 0.1, lwd = 1, angle = 30)


#### Table 16.1

accuracy(naive.pred, valid.ts)
accuracy(snaive.pred, valid.ts)


#### Figure 17.1

library(forecast)
Amtrak.data <- read.csv("Amtrak data.csv")

# Playing with a ts object
class(ridership.ts)

?ts
ridership.ts[1]
names(ridership.ts)

ts(1:10, frequency = 4, start = c(1959, 2)) # 2nd Quarter of 1959
print( ts(1:10, frequency = 12, start = c(12, 2)), calendar = TRUE)

## Using July 1954 as start date:
gnp <- ts(cumsum(1 + round(rnorm(1000,0.2), 2)),
          start = c(1954, 7), frequency = 52)
plot(gnp) # using 'plot.ts' for time-series plot


# create time series
ridership.ts <- ts(Amtrak.data$Ridership, start = c(1991,1),
                   end = c(2004,3), freq = 12)

# produce linear trend model
ridership.lm <- tslm(ridership.ts ~ trend)
summary(ridership.lm)


# plot the series
plot(ridership.ts, xlab = "Time", ylab = "Ridership", ylim = c(1300,2300),
     bty = "l")
lines(ridership.lm$fitted, lwd = 2)


#### Figure 17.2

# fit linear trend model to training set and create forecasts
train.lm <- tslm(train.ts ~ trend)
train.lm.pred <- forecast(train.lm, h = nValid, level = 0)

par(mfrow = c(2, 1))
plot(train.lm.pred, ylim = c(1300, 2600),  ylab = "Ridership", xlab = "Time",
     bty = "l", xaxt = "n", xlim = c(1991,2006.25), main = "", flty = 2)
axis(1, at = seq(1991, 2006, 1), labels = format(seq(1991, 2006, 1)))
lines(train.lm.pred$fitted, lwd = 2, col = "blue")
lines(valid.ts)
plot(train.lm.pred$residuals, ylim = c(-420, 500),  ylab = "Forecast Errors",
     xlab = "Time", bty = "l", xaxt = "n", xlim = c(1991,2006.25), main = "")
axis(1, at = seq(1991, 2006, 1), labels = format(seq(1991, 2006, 1)))
lines(valid.ts - train.lm.pred$mean, lwd = 1)



#### Table 17.2

summary(train.lm)



#### Figure 17.3

# fit exponential trend using tslm() with argument lambda = 0
train.lm.trend <- tslm(train.ts ~ trend)
train.lm.expo.trend <- tslm(train.ts ~ trend, lambda = 0)
train.lm.expo.trend.pred <- forecast(train.lm.expo.trend, h = nValid, level = 0)

plot(train.ts)
lines(train.lm.trend$fitted.values, col = "blue")
lines(train.lm.expo.trend$fitted.values, col = "red")

setdiff(1:159,1:100)
names(ridership.ts)
# fit linear trend using tslm() with argument lambda = 1 (no transform of y)
train.lm.linear.trend <- tslm(train.ts ~ trend, lambda = 1)
train.lm.linear.trend.pred <- forecast(train.lm.linear.trend, h = nValid, level = 0)

par(mfrow = c(1, 1))
plot(train.lm.expo.trend.pred, ylim = c(1300, 2600),  ylab = "Ridership",
     xlab = "Time", bty = "l", xaxt = "n", xlim = c(1991,2006.25), main = "", flty = 2)
axis(1, at = seq(1991, 2006, 1), labels = format(seq(1991, 2006, 1)))
lines(train.lm.expo.trend.pred$fitted, lwd = 2, col = "blue")  # Added in 6-5
lines(train.lm.linear.trend.pred$x, lwd = 1, col = "black", lty = 1)
lines(train.lm.linear.trend.pred$mean, lwd = 2, col = "black", lty = 3)
lines(train.lm.linear.trend$fitted.values)
lines(valid.ts)



#### Figure 17.4

# fit quadratic trend using function I(), which treats an object "as is".
train.lm.poly.trend <- tslm(train.ts ~ trend + I(trend^3))
summary(train.lm.poly.trend)
train.lm.poly.trend.pred <- forecast(train.lm.poly.trend, h = nValid, level = 0)

par(mfrow = c(1,1))
plot(train.lm.poly.trend.pred, ylim = c(1300, 2600),  ylab = "Ridership",
     xlab = "Time", bty = "l", xaxt = "n", xlim = c(1991,2006.25), main = "", flty = 2)
axis(1, at = seq(1991, 2006, 1), labels = format(seq(1991, 2006, 1)))
lines(train.lm.poly.trend$fitted, lwd = 2)
lines(valid.ts)

plot(train.lm.poly.trend$residuals, ylim = c(-400, 550),  ylab = "Forecast Errors",
     xlab = "Time", bty = "l", xaxt = "n", xlim = c(1991,2006.25), main = "")
axis(1, at = seq(1991, 2006, 1), labels = format(seq(1991, 2006, 1)))
lines(valid.ts - train.lm.poly.trend.pred$mean, lwd = 1)


par(mfrow = c(1,1))

#### Table 17.4

# include season as a predictor in tslm(). Here it creates 11 dummies,
# one for each month except for the first season, January.
train.lm.season <- tslm(train.ts ~ season)
summary(train.lm.season)



#### Table 17.5

train.lm.trend.season <- tslm(train.ts ~ trend + I(trend^2) + season)
summary(train.lm.trend.season)

## Accuracy of the full model
train.lm.trend.season.pred <- forecast(train.lm.trend.season, h = nValid, level = 0)
accuracy(train.lm.trend.season.pred, valid.ts)

train.lm.season.pred <- forecast(train.lm.season, h = nValid, level = 0)
accuracy(train.lm.season.pred, valid.ts)

#### Figure 17.7

ridership.24.ts <- window(train.ts, start = c(1991, 1), end = c(1991, 24))
Acf(ridership.24.ts, lag.max = 12, main = "")



#### Table 17.7

# fit linear regression with quadratic trend and seasonality to Ridership
train.lm.trend.season <- tslm(train.ts ~ trend + I(trend^2) + season)

# fit AR(1) model to training residuals
# use Arima() in the forecast package to fit an ARIMA model
# (that includes AR models); order = c(1,0,0) gives an AR(1).
train.res.arima <- Arima(train.lm.trend.season$residuals, order = c(1,0,0))
valid.res.arima.pred <- forecast(train.res.arima, h = 1)
summary(train.res.arima)



#### Figure 17.9

plot(train.lm.trend.season$residuals, ylim = c(-250, 250),  ylab = "Residuals",
     xlab = "Time", bty = "l", xaxt = "n", xlim = c(1991,2006.25), main = "")
axis(1, at = seq(1991, 2006, 1), labels = format(seq(1991, 2006, 1)))
lines(train.res.arima.pred$fitted, lwd = 2, col = "blue")


#### Table 17.8

sp500.df <- read.csv("SP500.csv")

sp500.ts <- ts(sp500.df$Close, start = c(1995, 5), end = c(2003, 8), freq = 12)
sp500.arima <- Arima(sp500.ts, order = c(1,0,0))
sp500.arima

# Sept 11 Air Travel----
data <- read.csv(file = "Sept11Travel.csv")
air.ts <-  ts(data$Air.RPM..000s., start = c(1990, 1), end = c(2004, 4), freq = 12)
plot(air.ts)

# Class practice ----

# 16.2
dept_store_data <- read.csv("DepartmentStoreSales.csv")
dept_ts <- ts(data = dept_store_data, start = c(2000,1), end = c(2005,4), frequency = 4)
plot(dept_ts)


plot(dept_ts[,1], as.vector(dept_ts[,2]),  ylab = "Sales (USD)", pch = 0,
     xlab = "Quarters",  xaxt = "n", main = "A well formatted plot")
axis(1, at = seq(1991, 2006, 1), labels = format(seq(1991, 2006, 1)))

