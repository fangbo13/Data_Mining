
# Time series in R
library(fma)
library(expsmooth)
library(forecast)
library(fpp2)

#################################
## `ts` objects and `ts` function
#################################

x <- c(123,39,78,52,110)
yr <- 2012:2016

y <- ts(c(123,39,78,52,110), start=2012)
 

## `ts` objects and `ts` function

#For observations that are more frequent than once per year, 
#add a `frequency` argument.
#E.g., monthly data stored as a numerical vector `z`:


data("housing")
plot(housing)
y <- ts(housing, frequency=12, start=c(1983, 1))
plot(y)

 
## Australian GDP
data(ausgdp)
ausgdp <- ts(ausgdp, frequency=4, start=c(1971,3))
ausgdp


y<-diff(goog)
autoplot(y)+
  ggtitle("Google dailychange in cloing price")+
  xlab("Day")+ylab("Change in price")


#############
## Time plots
#############

autoplot(melsyd[,"Economy.Class"])

autoplot(melsyd[,"Economy.Class"]) +
  ggtitle("Economy class passengers: Melbourne-Sydney") +
  xlab("Year") +
  ylab("Thousands")
 


autoplot(a10) + ylab("$ million") + xlab("Year") +
         ggtitle("Antidiabetic drug sales")
 
autoplot(dole)
help(dole)
autoplot(dole[,"Economy.Class"]) +
  ggtitle("Economy class passengers: Melbourne-Sydney") +
  xlab("Year") +
  ylab("Thousands")



## Australian GDP
autoplot(ausgdp)

## Residential electricity sales
elecsales

## Your turn

# - Create plots of the following time series: 
# `dole`, `bricksq`, `lynx`, `goog`
# - Use `help()` to find out about the data in each series.
# - For the last plot, modify the axis labels and title.










help(dole)
autoplot(dole)

help(bricksq)
autoplot(bricksq)

help(lynx)
autoplot(lynx)
plot(lynx)
 
help("goog")
autoplot(goog)
plot(goog)

autoplot(goog) + xlab("Year") +
  ggtitle("Daily closing stock prices of Google Inc") 

###################
#Seasonal plots
###################
ggseasonplot(a10, year.labels=TRUE, year.labels.left=TRUE) +
  ylab("$ million") +
  ggtitle("Seasonal plot: antidiabetic drug sales")




ggseasonplot(a10, polar=TRUE) +
  ylab("$ million") +
  ggtitle("Polar seasonal plot: antidiabetic drug sales")

###################
#Seasonal subseries plots
###################
ggsubseriesplot(a10) +
  ylab("$ million") +
  ggtitle("Seasonal subseries plot: antidiabetic drug sales")


###################
#Scatterplots
###################
autoplot(elecdemand[,c("Demand","Temperature")], facets=TRUE) +
  xlab("Year: 2014") + ylab("") +
  ggtitle("Half-hourly electricity demand: Victoria, Australia")


qplot(Temperature, Demand, data=as.data.frame(elecdemand)) +
  ylab("Demand (GW)") + xlab("Temperature (Celsius)")
 

autoplot(visnights[,1:5], facets=TRUE) +
  ylab("Number of visitor nights each quarter (millions)")

install.packages("GGally")
library("GGally")
GGally::ggpairs(as.data.frame(visnights[,1:5]))


`
## Are time plots best?

autoplot(elecdaily[,"Temperature"]) +
  xlab("Week") + ylab("Max temperature")

qplot(time(elecdaily), elecdaily[,"Temperature"]) +
  xlab("Week") + ylab("Max temperature")
 

 
data.frame(
  Week = c(time(elecdaily)),
  Maxtemp = c(elecdaily[,"Temperature"]) ) %>%
  ggplot(aes(x=Week, y=1)) +
    geom_tile(aes(fill=Maxtemp)) +
    scale_fill_gradient2(
      low = "navy",
      mid = "yellow",
     high = "red", midpoint=28) +
    ylab("") + scale_y_discrete(expand=c(0,0))
 
## Are time plots best?

 
ggseasonplot(a10, year.labels=TRUE, year.labels.left=TRUE) +
  ylab("$ million") +
  ggtitle("Seasonal plot: antidiabetic drug sales")
 
 
 
ggsubseriesplot(a10) + ylab("$ million") +
  ggtitle("Subseries plot: antidiabetic drug sales")
 

 

## Quarterly Australian Beer Production

 
beer <- window(ausbeer,start=1992)
autoplot(beer)
 

## Quarterly Australian Beer Production
 
ggseasonplot(beer,year.labels=TRUE)
 

## Quarterly Australian Beer Production

 
ggsubseriesplot(beer)
 

## Your turn

# The `arrivals` data set comprises quarterly international 
# arrivals (in thousands) to Australia from Japan, New Zealand, UK and the US.

  # - Use `autoplot()` and `ggseasonplot()` to compare the differences between the arrivals from these four countries.
  # - Can you identify any unusual observations?

# Seasonal or cyclic?

arrivals
help(arrivals)
autoplot(arrivals)
# See the structure of arrivals
str(arrivals)


# The biggest number of arrivals came from New Zealand in 1980s. And the title owner country changed to Japan in 1990s and came back to UK in 2000s.
# The arrival data of UK shows the biggest quarterly fluctuation.

ggseasonplot(arrivals[, "Japan"])
ggseasonplot(arrivals[, "NZ"])
ggseasonplot(arrivals[, "UK"])
ggseasonplot(arrivals[, "US"])

ggsubseriesplot(arrivals[, "Japan"])
ggsubseriesplot(arrivals[, "NZ"])
ggsubseriesplot(arrivals[, "UK"])
ggsubseriesplot(arrivals[, "US"])

# findings
# The arrivals from Japan decrease a lot in 2nd quarter compared to the other quarteres.
# The arrivals from New Zealand are highest in 3rd quarter and lowest in 1st quarter.
# The arrivals from UK and US are low in 2nd and 3rd quarters and high in 1st and 4th quarters.




## Time series patterns


autoplot(window(elec, start=1980)) +
  ggtitle("Australian electricity production") +
  xlab("Year") + ylab("GWh")
 
autoplot(bricksq) +
  ggtitle("Australian clay brick production") +
  xlab("Year") + ylab("million units")
 
autoplot(hsales) +
  ggtitle("Sales of new one-family houses, USA") +
  xlab("Year") + ylab("Total sales")
 
autoplot(ustreas) +
  ggtitle("US Treasury Bill Contracts") +
  xlab("Day") + ylab("price")
 
autoplot(lynx) +
  ggtitle("Annual Canadian Lynx Trappings") +
  xlab("Year") + ylab("Number trapped")
 
## Seasonal or cyclic?

 

# Lag plots and autocorrelation

## Example: Beer production


beer <- window(ausbeer, start=1992)
gglagplot(beer)
```

## Example: Beer production

 
beer <- window(ausbeer, start=1992)
gglagplot(beer)
 

 

## Autocorrelation
 
#Results for first 9 lags for beer data:
 
beeracf <- matrix(acf(c(beer), lag.max=9,
                      plot=FALSE)$acf[-1,,1], nrow=1)
colnames(beeracf) <- paste("$r_",1:9,"$",sep="")
knitr::kable(beeracf, booktabs=TRUE,
             align="c", digits=3,
             format.args=list(nsmall=3))
 
ggAcf(beer)
 

## Trend and seasonality in ACF plots
 
## Aus monthly electricity production
 
elec2 <- window(elec, start=1980)
autoplot(elec2)
 
ggAcf(elec2, lag.max=48)
 
 
## Google stock price
 
autoplot(goog)
 
ggAcf(goog, lag.max=100)
 

# Explore the following time series using these functions. Can you spot any seasonality, cyclicity and trend? What do you learn about the series?
# 
#   - `hsales`
#   - `usdeaths`
#   - `bricksq`
#   - `sunspotarea`
#   - `gasoline`


help("hsales")
autoplot(hsales)
ggseasonplot(hsales)
ggsubseriesplot(hsales)
gglagplot(hsales)
ggAcf(hsales, lag.max = 400)
# can spot seasonality and cyclicity. 
# The cycle period is about 4 years(100 months)


help("usdeaths")
autoplot(usdeaths)
ggseasonplot(usdeaths)
ggsubseriesplot(usdeaths)
gglagplot(usdeaths)
ggAcf(usdeaths, lag.max = 60)
# can spot seasonality

help("sunspotarea")
autoplot(sunspotarea)
ggseasonplot(sunspotarea) 
# not seasonal, can't draw it
ggsubseriesplot(sunspotarea)
# not seasonal, useless to draw it
gglagplot(sunspotarea)
ggAcf(sunspotarea, lag.max = 50)
# can spot strong cyclicity

help("gasoline")
autoplot(gasoline)
ggseasonplot(gasoline)
# ggsubseriesplot(gasoline)
# The number of weeks is 52 and it looked like it is too much for subseriesplot
gglagplot(gasoline)
ggAcf(gasoline, lag.max = 1000)
# can spot seasonality and trend

 
# White noise

wn <- ts(rnorm(36))
autoplot(wn)
ggAcf(wn)

 

## Your turn
## Example: Pigs slaughtered

pigs
str(pigs)

y <- ts(pigs$production, frequency=4, start=1990)

autoplot(y) +
  xlab("Year") + ylab("thousands") +
  ggtitle("Number of pigs slaughtered in Victoria")
  
ggAcf(y)



 
dgoog <- diff(goog)
ggAcf(dgoog)


###


# use time series analysis
#Load Amtrak data from computer
ridership.ts <- ts(Amtrak$Ridership, start = c(1991, 1), end = c(2004, 3), freq = 12)
plot(ridership.ts, xlab = "Year", ylab = "Ridership (in 000s)", ylim = c(1300, 2300))


#Load Boston Housing data from Kaggle
## barchart of CHAS vs. mean MEDV
# compute mean MEDV per CHAS = (0, 1)

data.for.plot <- aggregate(Boston$medv, by = list(Boston$chas), FUN = mean)
names(data.for.plot) <- c("chas", "Meanmedv")
barplot(data.for.plot$Meanmedv, names.arg = data.for.plot$chas,
        xlab = "chas", ylab = "Avg. medv")

## scatter plot with axes names
plot(Boston$medv ~ Boston$lstat, 
               xlab = "MDEV", 
               ylab = "LSTAT")

## histogram of MEDV
hist(Boston$medv, xlab = "MEDV")


## boxplot of MEDV for different values of CHAS
boxplot(Boston$medv ~ Boston$chas, xlab = "CHAS", ylab = "MEDV")


## simple heatmap of correlations (without values)
heatmap(cor(housing.df), Rowv = NA, Colv = NA)

## heatmap with values
library(gplots)
heatmap.2(cor(Boston), Rowv = FALSE, Colv = FALSE, dendrogram = "none",
          cellnote = round(cor(Boston),2),
          notecol = "black", key = FALSE, trace = 'none', margins = c(10,10))


# alternative plot with ggplot [text has more complex Base R coding too]
library(ggplot2)
ggplot(Boston, aes(y = nox, x = lstat, colour= medv)) +
  geom_point(alpha = 0.6)



## simple plot
# use plot() to generate a matrix of 4X4 panels with variable name on the diagonal,
# and scatter plots in the remaining panels.
plot(Boston[, c(1, 3, 12, 13)])

# alternative, nicer plot (displayed)
library(GGally)
ggpairs(Boston[, c(1, 3, 12, 13)])


## scatter plot: regular and log scale
plot(Boston$medv ~ Boston$crim, xlab = "CRIM", ylab = "MEDV")

# to use logarithmic scale set argument log = to either 'x', 'y', or 'xy'.
plot(Boston$medv ~ Boston$crim,
     xlab = "CRIM", ylab = "MEDV", log = 'xy')



## fit curve
ridership.lm <- tslm(ridership.ts ~ trend + I(trend^2))
plot(ridership.ts, xlab = "Year", ylab = "Ridership (in 000s)", ylim = 
       c(1300, 2300))
lines(ridership.lm$fitted, lwd = 2)


## zoom in, monthly, and annual plots
ridership.2yrs <- window(ridership.ts, start = c(1991,1), end = c(1992,12))
plot(ridership.2yrs, xlab = "Year", ylab = "Ridership (in 000s)", ylim = c(1300, 2300))
monthly.ridership.ts <- tapply(ridership.ts, cycle(ridership.ts), mean)
plot(monthly.ridership.ts, xlab = "Month", ylab = "Average Ridership",
     ylim = c(1300, 2300), type = "l", xaxt = 'n')
## set x labels
axis(1, at = c(1:12), labels = c("Jan","Feb","Mar", "Apr","May","Jun",
                                 "Jul","Aug","Sep", "Oct","Nov","Dec"))
annual.ridership.ts <- aggregate(ridership.ts, FUN = mean)
plot(annual.ridership.ts, xlab = "Year", ylab = "Average Ridership",
     ylim = c(1300, 2300))

#upload utilities file
plot(Utilities$Fuel_Cost ~ Utilities$Sales,
     xlab = "Sales", ylab = "Fuel Cost", xlim = c(2000, 20000))
text(x = Utilities$Sales, y = Utilities$Fuel_Cost,
     labels = Utilities$Company, pos = 4, cex = 0.8, srt = 20, offset = 0.2)

#upload Universal Bank file
# use function alpha() in library scales to add transparent colors
library(scales)
plot(jitter(Universal$CCAvg, 1) ~ jitter(Universal$Income, 1),
     col = alpha(ifelse(Universal$Securities.Account == 0, 'grey', 'red'), 0.4),
     pch = 20, log = 'xy', ylim = c(0.1, 10),
     xlab = "Income", ylab = "CCAvg")


